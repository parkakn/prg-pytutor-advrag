# CIS 3260 – Introduction to Programming
## Individual Assignment 1

### Submission:
- Add your full name and email address as comments on top of each python program. Add appropriate comments at other locations of your python programs for readability.
- Name your python program as IA1Q#.py. For example, for question #1, your program should have a name IA1Q1.py.
- For each question, put the source code (must be texts, screenshot not accepted), a screenshot of the output, and experience with programming errors in a word document. Name your word document as IA1.doc.
- Submit the following items into iCollege -> Assessment -> Assignment 1:
- IA1.doc
- IA1Q1.py
- IA1Q2.py
- IA1Q3.py

### [Some Comments from your instructor]:
I highly recommend you use PyCharm to write the following two programs. You can open an existing python project and create two new python files IA3Q1.py, IA3Q2.py, and IA3Q3.py.

### 1. [Objectives: 1.4, 1.5, 1.6]
1) [15 pts] Write a program that displays "Welcome to CIS3260”, "I love Python", "This is my first chat bot" on three different lines.

2) Share with us one error you experienced when writing this program. [It is common to experience errors. I will be surprised if you do not see any errors. In case this happens, you can make some errors by yourself.]

A. [5 pts] Explain what is the type of the error (syntax, run-time, or logical error)?

B. [5 pts] How did you resolve it?

C. [5 pts] How much time did you spend to resolve it?

### 2. [Objectives: 1.4, 1.5, 1.6, 2.6, 2.7]
1) [15 pts] Write a program that displays the result of \(-10*3 + 2.5 \times 3\) and \(32.6 - 913\).

2) Share with us one error you experienced when writing this program. [It is common to experience errors. I will be surprised if you do not see any errors. In case this happens, you can make some errors by yourself.]

A. [5 pts] Explain what is the type of the error (syntax, run-time, or logical error)?

B. [5 pts] How did you resolve it?

C. [5 pts] How much time did you spend to resolve it?
---
# Introduction to Programming Assignment

## Objectives: 2.2, 2.4, 2.6, 2.8

### Task 1: Average Velocity Calculation [22 pts]
Average velocity is defined as the change of distance divided by the time taken to make the change, as shown in the following formula:

\[ v = \frac{(d1 - d0)}{t} \]

Where:
- \( d0 \) is the starting distance in meters,
- \( d1 \) is the ending distance in meters,
- \( t \) is the time span in seconds.

**Instructions:**
Write a program that reads the starting distance, ending distance, and time span, and then displays the average velocity.

**Sample Run:**
```
Enter the starting distance: 5
Enter the ending distance: 25
Enter the ending time: 20
The average velocity is 1.0
```

### Task 2: Error Reflection
Share with us TWO errors you experienced when writing this program. It is common to experience errors. I will be surprised if you do not see any errors. In case this happens, you can make some errors by yourself.

#### I. Error 1
- **A.** [3 pts] Explain what is the type of the error (syntax, run-time, or logical error)?
- **B.** [3 pts] How did you resolve it?
- **C.** [3 pts] How much time did you spend to resolve it?

#### II. Error 2
- **A.** [3 pts] Explain what is the type of the error (syntax, run-time, or logical error)?
- **B.** [3 pts] How did you resolve it?
- **C.** [3 pts] How much time did you spend to resolve it?

----

## Objectives for Week 1

### Chapter 1
1.1 To explain and describe the concepts of computer hardware, programs, and operating systems (§1.2 -1.4)
1.2 To describe the history of Python (§1.5)
1.3 To explain the basic syntax of a Python program (§1.6)
1.4 To write and run a simple Python program (§1.6)
---
# Week 2

## Chapter 1
1.5 To use sound programming style and document programs properly (§1.7).
1.6 To explain the differences between syntax errors, runtime errors, and logic errors (§1.8).

## Chapter 2
2.1 To write programs that perform simple computations (§2.2)
2.2 To obtain input from a program’s user by using the input function and to convert strings to numbers using the int and float functions (§2.3)
2.3 To use identifiers to name elements such as variables and functions (§2.4)
To assign data to variables (§2.5)
2.4 To define named constants (§2.7)
2.5 To use the operators +, −, *, /, //, %, and ** (§2.8)
2.6 To program using division and remainder operators (§2.9)
2.7 To write and evaluate numeric expressions (§2.10)

----

This document outlines the objectives for Week 2 of an introduction to programming course, focusing on sound programming practices, error types, and basic programming concepts such as computations, user input, identifiers, constants, and operators.